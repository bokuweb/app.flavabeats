// Generated by CoffeeScript 1.8.0
(function() {
  window.Game = (function() {
    var _game, _generateNote, _getSprite, _poolSprite, _renderLogo;

    _game = {
      core: null,
      playMusic: null,
      status: "stop",
      pool: {
        note: []
      },
      score: {
        board: null,
        actual: 0,
        shown: 0
      }
    };

    function Game(parms) {
      var name, value;
      for (name in parms) {
        value = parms[name];
        _game[name] = value;
      }
      enchant();
      _game.core = new Core(980, 600);
      _game.core.fps = 36;
      _game.core.preload("img/chara1.png", "img/chara1_shadow.png", "img/logo.png", "img/score.png");
      _game.note.group = new Group();
      _game.note.index = 0;
    }

    Game.prototype.load = function(music) {
      _game.core.preload(music.src, music.img);
      _game.core.start();
      return _game.core.onload = function() {
        var i, info, infoHtml, note, noteShadow, _i, _j, _k, _ref;
        _game.playMusic = _game.core.assets[music.src];
        for (i = _i = 0; _i <= 6; i = ++_i) {
          noteShadow = new Sprite(_game.note.width, _game.note.height);
          if (i % 2) {
            noteShadow.y = -_game.note.height - 80 + _game.note.fallDistance;
          } else {
            noteShadow.y = -_game.note.height + _game.note.fallDistance;
          }
          noteShadow.opacity = 0.6;
          noteShadow.x = i * _game.note.width + 480;
          noteShadow.image = _game.core.assets["img/chara1_shadow.png"];
          _game.core.rootScene.addChild(noteShadow);
        }
        _renderLogo();
        info = new Entity();
        info._element = document.createElement('div');
        infoHtml = '<div id="info"><img src="' + music.img + '" class="music-image"> <div class="music-description"><span><i class="fa fa-headphones"></i>' + music.title + '</span><br> <span class="author">' + music.by + '</span><br> <span class="license">' + music.license + '</span><br> <span class="level">Level</span>';
        for (i = _j = 0; _j <= 9; i = ++_j) {
          if (i < music.level) {
            infoHtml += '<i class="fa fa-star-o level"></i>';
          }
        }
        infoHtml += '</p></div>';
        info._element.innerHTML = infoHtml;
        info.width = 560;
        info.x = 20;
        info.y = 160;
        _game.score.board = new Score({
          game: _game.core,
          offsetX: 20,
          offsetY: 360,
          url: "img/score.png",
          num: 6,
          width: 36,
          height: 49.7
        });
        _game.score.board.generate();
        _game.score.board.update(0);
        _game.core.rootScene.addChild(info);
        _game.core.rootScene.addChild(_game.note.group);
        for (i = _k = 0, _ref = _game.note.timing.length - 1; 0 <= _ref ? _k <= _ref : _k >= _ref; i = 0 <= _ref ? ++_k : --_k) {
          note = new Sprite(_game.note.width, _game.note.height);
          note.image = _game.core.assets["img/chara1.png"];
          _poolSprite(_game.pool.note, note);
        }
        return _game.core.rootScene.addEventListener("enterframe", function() {
          music = _game.playMusic;
          note = _game.note;
          if (_game.status === "playing") {
            if (note.timing[note.index] != null) {
              if (music.currentTime > (note.timing[note.index] - (note.fallDistance / note.speed)) - (1 / _game.core.fps)) {
                _generateNote(note.index++);
              }
            }
            if (_game.score.actual > _game.score.shown) {
              _game.score.shown += 100000 / _game.note.timing.length / 6;
              if (_game.score.actual < _game.score.shown) {
                _game.score.shown = _game.score.actual;
              }
              _game.score.board.update(Math.ceil(_game.score.shown));
            }
          }
          if (music.currentTime >= _game.time.end || music.duration <= music.currentTime) {
            if (music.volume - 0.1 < 0) {
              music.volume = 0;
            } else {
              music.volume -= 0.1;
            }
            if (music.volume <= 0) {
              music.stop();
              music.volume = 1;
              music.currentTime = 0;
              return _game.status = "stop";
            }
          }
        });
      };
    };

    _renderLogo = function() {
      var logo;
      logo = new Sprite(200, 50);
      logo.image = _game.core.assets["img/logo.png"];
      logo.y = 40;
      logo.x = 10;
      return _game.core.rootScene.addChild(logo);
    };

    _generateNote = function(number) {
      var note;
      note = _getSprite(_game.pool.note);
      note.number = number;
      note.key = _game.note.key[number];
      if (note.key % 2) {
        note.destinationY = -_game.note.height - 80 + _game.note.fallDistance;
        note.y = -_game.note.height - 80;
      } else {
        note.destinationY = -_game.note.height + _game.note.fallDistance;
        note.y = -_game.note.height;
      }
      note.x = note.key * note.width + 480;
      note.frame = 0;
      note.timing = _game.note.timing[number];
      note.clear = false;
      note.opacity = 1;
      note.tl.clear();
      note.tl.setTimeBased();
      note.tl.scaleTo(1, 1, 0);
      note.tl.moveY(note.destinationY, (_game.note.fallDistance / _game.note.speed) * 1000);
      note.hasClearAnimationStarted = false;
      _game.note.group.addChild(note);
      return note.addEventListener("enterframe", function() {
        var judge, judgeLabel, music, threshold, _ref, _ref1;
        music = _game.playMusic;
        note = _game.note;
        threshold = _game.threshold;
        if (this.oldtime != null) {
          this.rotate((music.currentTime - this.oldtime) * 500);
        }
        this.oldtime = music.currentTime;
        if (note.timing[this.number] - music.currentTime < -1) {
          this.tl.fadeOut(300).then(function() {
            return note.group.removeChild(this);
          });
        }
        if (this.clear && !this.hasClearAnimationStarted) {
          this.tl.clear();
          this.tl.scaleTo(1.5, 1.5, 200).and().fadeOut(200).then(function() {
            return note.group.removeChild(this);
          });
          if ((-threshold.great < (_ref = note.timing[this.number] - this.clearTime) && _ref < threshold.great)) {
            judge = "great";
            _game.score.actual += 100000 / _game.note.timing.length;
          } else if ((-threshold.good < (_ref1 = note.timing[this.number] - this.clearTime) && _ref1 < threshold.good)) {
            judge = "good";
            _game.score.actual += 70000 / _game.note.timing.length;
          } else {
            judge = "bad";
          }
          judgeLabel = new Label(judge);
          judgeLabel.x = 450;
          judgeLabel.y = 450;
          _game.core.rootScene.addChild(judgeLabel);
          judgeLabel.tl.setTimeBased();
          judgeLabel.tl.fadeOut(300).and().moveY(400, 300).then(function() {
            return _game.core.rootScene.removeChild(judgeLabel);
          });
          return this.hasClearAnimationStarted = true;
        }
      });
    };

    _poolSprite = function(pool, sprite) {
      pool.push(sprite);
      sprite.active = false;
      if (sprite.addEventListener) {
        return sprite.addEventListener("removed", function() {
          return this.active = false;
        });
      }
    };

    _getSprite = function(pool) {
      var i, value, _i, _len;
      for (i = _i = 0, _len = pool.length; _i < _len; i = ++_i) {
        value = pool[i];
        if (!value.active) {
          value.active = true;
          return value;
        }
      }
      console.log("error sprite pool empty");
      return false;
    };

    document.addEventListener("keydown", function(e) {
      var code, music, value, _i, _len, _ref, _ref1, _results;
      music = _game.playMusic;
      if (_game.status === "stop") {
        if (e.keyCode === 13) {
          music.play();
          return _game.status = "playing";
        }
      } else if (_game.status = "playing") {
        console.log("timing = " + music.currentTime);
        _ref = _game.note.group.childNodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          value = _ref[_i];
          switch (e.keyCode) {
            case 90:
              code = 0;
              break;
            case 83:
              code = 1;
              break;
            case 88:
              code = 2;
              break;
            case 68:
              code = 3;
              break;
            case 67:
              code = 4;
              break;
            case 70:
              code = 5;
              break;
            case 86:
              code = 6;
              break;
            default:
              code = null;
          }
          if (value.key === code) {
            if ((-1 < (_ref1 = value.timing - music.currentTime) && _ref1 < 1)) {
              value.clear = true;
              value.clearTime = music.currentTime;
              console.log(value.clearTime);
              break;
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });

    return Game;

  })();

}).call(this);
